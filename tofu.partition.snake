import os

shell.prefix("source env.tofu.cfg; ")

configfile: "config.tofu.yaml"

BAX2BAM  = "/net/eichler/vol18/zevk/great_apes/iso_seq/cc2_analysis/pitchfork/deployment/bin/bax2bam"
TOPGROUP = config["group_name"]
TYPES    = ["flnc", "nfl"]

GMAP_DB = config["gmap_db"]
GMAP_NAME = config["gmap_name"]

NAMES  = []
LOOKUP = {}

PARTS = []
PARTITIONS = "mapped/{0}/partitions.{0}.bed".format(TOPGROUP)
if os.path.exists(PARTITIONS):
    with open(PARTITIONS, "r") as infile:
        for line in infile:
            chr, start, end, part = line.rstrip().split()[:4]
            if part not in PARTS:
                PARTS.append(part)
else:
    print("Partition file {} does not exist. Continuing...".format(PARTITIONS))

NAMES = config[TOPGROUP].keys()

EXTENSIONS = ["merged.sort.bam",
              "isoform_stats.hq.tab",
              "all_sizes.quivered_hq.fastq",
              "collapsed_isoform_stats.hq.tab",
              "all_sizes.quivered_hq.collapsed.fq",
              "all_sizes.quivered_hq.no5merge.collapsed.min_fl_2.gff",
              "all_sizes.quivered_hq.no5merge.collapsed.min_fl_2.filtered.gff"
              ]

if not os.path.exists("log"):
    os.makedirs("log")

localrules: all, create_partitions, get_flnc_nfl

rule all:
    input  : expand("output/{top}.{ext}", ext=EXTENSIONS, top=TOPGROUP),
             "output/isoform.collapsed.abundance.tab"

rule merge_mapped_isoforms:
    input: sam = expand("{{top}}.{part}/combined/all_sizes.quivered_hq.fastq.sam", part=PARTS),
           header = "mapped/{top}/isoseq_flnc.bam"
    output: "output/{top}.merged.bam", "output/{top}.merged.sort.bam"
    params: sge_opts = "-l mfree=1G -l h_rt=1:0:0"
    shell:
        """/net/gs/vol3/software/modules-sw/samtools/1.3/Linux/RHEL6/x86_64/bin/samtools merge -h {input.header} {output[0]} {input.sam}
        /net/gs/vol3/software/modules-sw/samtools/1.3/Linux/RHEL6/x86_64/bin/samtools sort {output[0]} > {output[1]}
        """

rule merge_abundance:
    input: expand("{top}.{part}/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.abundance.txt", top=TOPGROUP, part=PARTS)
    output: "output/isoform.collapsed.abundance.tab"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    run:
        import pandas as pd
        df = pd.DataFrame(columns=["pbid", "partition", "count_fl", "count_nfl"])
        for file in input:
            part = file.split("/")[0].split(".")[-1]
            df2 = pd.read_table(file, comment="#")
            df2["partition"] = part
            df2 = df2[["pbid", "partition", "count_fl", "count_nfl"]]
            df = df.append(df2)
        df.to_csv(output[0], sep="\t", index=False)

rule merge_stats:
    input: expand("{top}.{part}/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.read_stat.txt", top=TOPGROUP, part=PARTS)
    output: "output/quivered_hq.collapsed.read_stat.tab"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    run:
        import pandas as pd
        df = pd.DataFrame(columns=["id", "partition", "length", "is_fl", "stat", "pbid"])
        for file in input:
            part = file.split("/")[0].split(".")[-1]
            df2 = pd.read_table(file)
            df2["partition"] = part
            df = df.append(df2)
        df.to_csv(output[0], sep="\t", index=False)

rule merge_collapsed_isoforms:
    input: expand("{{top}}.{part}/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.min_fl_2.rep.fq", part=PARTS)
    output: "output/{top}.collapsed_isoform_stats.hq.tab", "output/{top}.all_sizes.quivered_hq.collapsed.fq"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        """module load anaconda/20161130
        export PATH=/net/eichler/vol2/eee_shared/modules/anaconda3/envs/py3.20161130/bin/:$PATH
        python merge_isoforms.py {output[0]} {wildcards.top}.*/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.min_fl_2.rep.fq
        cat {input} > {output[1]}
        """

rule merge_isoforms:
    input: expand("{{top}}.{part}/combined/all_sizes.quivered_hq.fastq", part=PARTS)
    output: "output/{top}.isoform_stats.hq.tab", "output/{top}.all_sizes.quivered_hq.fastq"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    shell:
        """module load anaconda/20161130
        export PATH=/net/eichler/vol2/eee_shared/modules/anaconda3/envs/py3.20161130/bin/:$PATH
        python merge_isoforms.py {output[0]} {wildcards.top}.*/combined/all_sizes.quivered_{wildcards.qual}.fastq
        cat {input} > {output[1]}
        """

rule merge_gff:
    input: unfiltered=expand("{{top}}.{part}/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.min_fl_2.gff", part=PARTS),
           filtered=expand("{{top}}.{part}/combined/all_sizes.quivered_hq.fastq.no5merge.collapsed.min_fl_2.filtered.gff", part=PARTS)
    output: "output/{top}.all_sizes.quivered_hq.no5merge.collapsed.min_fl_2.gff", "output/{top}.all_sizes.quivered_hq.no5merge.collapsed.min_fl_2.filtered.gff"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0"
    run:
        def merge_gff(outfn, infiles):
            with open(outfn, "w") as outfile:
                for fn in infiles:
                    part = fn.split("/")[0].split(".")[1]
                    with open(fn, "r") as infile:
                        for line in infile:
                            outline = line.rstrip().replace('_id "PB', '_id "%s.PB' % part)
                            print(outline, file=outfile)

        merge_gff(output[0], input.unfiltered)
        merge_gff(output[1], input.filtered)

rule ice_clustering:
    input  : flnc = "partitioned/{top}/{part}/isoseq_flnc.cleaned.fastq",
             nfl = "partitioned/{top}/{part}/isoseq_nfl.cleaned.fastq",
             bas_fofn = "{top}/fasta_fofn_files/{top}.bas.fofn",
             fasta_fofn = "{top}/fasta_fofn_files/{top}.fasta.fofn"
    output : ["{top}.{part}/combined/all_sizes.quivered_%s" % ft for ft in ["hq.fastq", "hq.fastq.no5merge.collapsed.min_fl_2.rep.fq", "hq.fastq.sam", "lq.fastq", "hq.fastq.no5merge.collapsed.abundance.txt"]]
    params : sge_opts = "-l mfree=12G -l h_rt=10:0:0", max_jobs=20, blasr_procs=4, gcon_procs=2, output_basename="final_consensus_sequence.{top}.{part}.fasta"
    shell  : # Full path to actual tofu_wrap script: /net/eichler/vol5/home/bnelsj/src/VENV_TOFU/lib/python2.7/site-packages/pbtools.pbtranscript-2.2.3-py2.7-linux-x86_64.egg/EGG-INFO/scripts/tofu_wrap.py
        """set -eo pipefail
        tofu_wrap.py --nfl_fa {input.nfl} --bas_fofn {input.bas_fofn} -d {wildcards.top}.{wildcards.part} --use_sge \
            --max_sge_jobs {params.max_jobs} --blasr_nproc {params.blasr_procs} \
            --gcon_nproc {params.gcon_procs} --quiver_nproc 2 --quiver \
            --bin_manual "(0,100)" --output_seqid_prefix {wildcards.top}.{wildcards.part} \
            --sge_env_name serial --gmap_db {GMAP_DB} --gmap_name {GMAP_NAME} \
            --fasta_fofn {input.fasta_fofn} {input.flnc} {params.output_basename}
        if [[ -e {wildcards.top}.{wildcards.part}/0to100kb_part0/{wildcards.top}.{wildcards.part}/combined ]]
            then rsync {wildcards.top}.{wildcards.part}/0to100kb_part0/{wildcards.top}.{wildcards.part}/combined/* {wildcards.top}.{wildcards.part}/combined
        fi
        if [[ -e {wildcards.top}.{wildcards.part}/0to100kb_part0/output/{wildcards.top}.{wildcards.part}/combined ]]
            then rsync {wildcards.top}.{wildcards.part}/0to100kb_part0/output/{wildcards.top}.{wildcards.part}/combined/* {wildcards.top}.{wildcards.part}/combined
        fi
        """

rule prepare_tofu_input:
    input  : lambda wc: config[wc.top].values()
    output : "{top}/fasta_fofn_files/{top}.fasta.fofn"
    params : sge_opts="-l h_rt=1:0:0"
    run    :
        outdir = os.path.dirname(output[0])
        with open(output[0], "w") as out_fn:
            for fn in input:
                print(os.path.abspath(fn.replace(".bax.h5", ".subreads.fasta")), file=out_fn)

rule fofn:
    input  : lambda wc: config[wc.top].values()
    output : "{top}/fasta_fofn_files/{top}.bas.fofn"
    params : sge_opts="-l mfree=2G -l h_rt=00:20:00 -q eichler-short.q"
    run    : 
        with open(output[0], "w") as out_fn:
            for fn in input:
                print(os.path.abspath(fn), file=out_fn)

rule clean_fastq:
    input: "partitioned/{top}/{part}/isoseq_{type}.fastq"
    output: "partitioned/{top}/{part}/isoseq_{type}.cleaned.fastq"
    params: sge_opts="-l h_rt=1:0:0 -l mfree=2G"
    shell:
        """module load anaconda/20161130
        export PATH=/net/eichler/vol2/eee_shared/modules/anaconda3/envs/py3.20161130/bin/:$PATH
        python clean_fastq.py {input} {output}"""

rule get_unmapped:
    input: "mapped/{top}/isoseq_{type}.bam"
    output: "partitioned/{top}/unmapped/isoseq_flnc.fastq"
    params: sge_opts="-l h_rt=2:0:0 -l mfree=4G"
    shell:
        """module load anaconda/20161130
        export PATH=/net/eichler/vol2/eee_shared/modules/anaconda3/envs/py3.20161130/bin/:$PATH
        python get_unmapped.py {input} {output}"""

rule partition:
    input: mapped="mapped/{top}/isoseq_{type}.bam", partitions="mapped/{top}/partitions.{top}.bed"
    output: "partitioned/{top}/{part}/isoseq_{type}.fastq",
             "partitioned/{top}/{part}/regions_{type}.bed"
    params: sge_opts="-l h_rt=0:30:0"
    run:
        outfile = open(output[1], "w")
        with open(input.partitions, "r") as reader:
            for line in reader:
                chr, start, end, name, reads = line.rstrip().split()
                if name == wildcards.part:
                    print(chr, start, end, sep="\t", file=outfile)
        outfile.close()
        shell("/net/gs/vol3/software/modules-sw/samtools/1.3/Linux/RHEL6/x86_64/bin/samtools view \
               -b -q40 {input.mapped} -L {output[1]} | \
               /net/gs/vol3/software/modules-sw/samtools/1.3/Linux/RHEL6/x86_64/bin/samtools fastq - > {output[0]}")

rule create_partitions:
    input: expand("mapped/{top}/partitions.{top}.bed", top=TOPGROUP)

rule define_partition_regions:
    input: "mapped/{top}/isoseq_flnc.bam"
    output: "mapped/{top}/partitions.{top}.bed"
    params: sge_opts="-l mfree=4G -l h_rt=1:0:0", wgac=config["wgac"]
    shadow: True
    shell:
        """module load anaconda/20161130
        export PATH=/net/eichler/vol2/eee_shared/modules/anaconda3/envs/py3.20161130/bin/:$PATH
        samtools view -b {input} -q 40 | bedtools bamtobed > {wildcards.top}.isoseq_flnc.sorted.bed
        bedtools merge -i {wildcards.top}.isoseq_flnc.sorted.bed -c 4 -o count > {wildcards.top}.isoseq_flnc.merged.bed
        python partition_reads_by_segdups.py {params.wgac} {wildcards.top}.isoseq_flnc.merged.bed {output} --count_threshold 500"""

rule gmap:
    input  : "merged_trimmed/{top}/isoseq_{type}.fasta"
    output : "mapped/{top}/isoseq_{type}.bam", "mapped/{top}/isoseq_{type}.bam.bai"
    params : sge_opts="-l mfree=8G -pe serial 6 -l h_rt=4:0:0:0"
    shell  :
        """mkdir -p /var/tmp/indices/gmap2
           mkdir -p /var/tmp/`whoami`
           rsync -arv --bwlimit=50000 --exclude "GRCh38.11" {GMAP_DB} /var/tmp/indices
           /net/eichler/vol5/home/mchaisso/software/bin/gmap --dir=/var/tmp/indices/gmap2 \
           --db={GMAP_NAME} -f samse -t 6 {input} > $TMPDIR/isoseq_{wildcards.type}.sam
           samtools view -Sb $TMPDIR/isoseq_{wildcards.type}.sam | samtools sort -@ 6 - $TMPDIR/{wildcards.type} -o > {output[0]}
           samtools index {output[0]}
        """

rule get_flnc_nfl:
    input: expand("merged_trimmed/{top}/isoseq_{type}.fasta.fai", top=TOPGROUP, type=["flnc", "nfl"])

rule catlens:
    input  : STATS=expand("primer_trimmed/{names}/isoseq_flnc.fasta.fai", names=NAMES)
    output : "merged_trimmed/{top}/isoseq_{type}.fasta.fai"
    params : sge_opts="-l mfree=1G -l h_rt=02:00:00 -q eichler-short.q"
    shell  : "cat {input.STATS} >{output}"

rule catfa:
    input  : FA=expand("primer_trimmed/{names}/isoseq_{{type}}.fasta", names=NAMES),
             STATS=expand("primer_trimmed/{names}/isoseq_{{type}}.fasta.len.txt", names=NAMES)
    output : "merged_trimmed/{top}/isoseq_{type}.fasta"
    params : sge_opts="-l mfree=1G -l h_rt=02:00:00 -q eichler-short.q"
    shell  : "cat {input.FA} > {output}"

rule lenStat:
    input  : "primer_trimmed/{names}/isoseq_{type}.fasta.fai"
    output : "primer_trimmed/{names}/isoseq_{type}.fasta.len.txt"
    params : sge_opts="-l mfree=1G -l h_rt=02:00:00 -q eichler-short.q"
    shell  : "awk '{{print $2}}' {input} > {output}"

rule lens:
    input  : "primer_trimmed/{names}/isoseq_{type}.fasta"
    output : "primer_trimmed/{names}/isoseq_{type}.fasta.fai"
    params : sge_opts="-l mfree=1G -l h_rt=02:00:00 -q eichler-short.q"
    shell  :  "samtools faidx {input}"

rule trim:
    input  : FAS="post_pbccs_fasta/{names}.fa", BCC="scripts/do_barcode.sh"
    output : "primer_trimmed/{names}/isoseq_flnc.fasta", "primer_trimmed/{names}/isoseq_nfl.fasta"
    params : sge_opts="-l mfree=4G -l h_rt=4:00:00 -q eichler-short.q -pe serial 12"
    shadow : True
    shell  : 
        "python scripts/fluid_barcode_identification.py --reads_fn {input.FAS} "
                "--primer_fn_forward data/custom_barcode_primers_forward.fa "
                "--primer_fn_reverse data/custom_barcode_primers_reverse.fa "
                "--ncpus 12 "
                "--flnc_fn_out {output[0]} "
                "--nfl_fn_out {output[1]}"

rule bam2fa:
    input  : BAM="pbccs_results/{names}.pbccs.bam", XML="pbccs_results/{names}.pbccs.consensusreadset.xml"
    output : "post_pbccs_fasta/{names}.fa"
    params : sge_opts="-l mfree=3G -l h_rt=48:00:00 -q eichler-short.q"
    shell  : "bamtools convert -in {input.BAM} -format fasta > {output}"

rule ccs:
    input  : BAM="cc2_bams/{names}.subreads.bam", CCS="/net/eichler/vol18/zevk/great_apes/iso_seq/cc2_analysis/pitchfork/deployment/bin/ccs"
    output : "pbccs_results/{names}.pbccs.bam", "pbccs_results/{names}.pbccs.consensusreadset.xml", "pbccs_results/{names}.ccs_report.txt"
    params : sge_opts="-l mfree=4G -l h_rt=48:00:00 -q eichler-short.q -pe serial 4"
    shell  : "{input.CCS} --numThreads=4 --minLength=100 --maxLength=10000 --minPasses=1 --reportFile={output[2]} {input.BAM} {output[0]}"

rule bax2bam:
    input  : BAX2BAM , FL=lambda wc: config[TOPGROUP][wc.names]
    output : "cc2_bams/{names}.subreads.bam"
    params : sge_opts="-l mfree=15G -l h_rt=06:00:00 -q eichler-short.q"
    shell  : "{BAX2BAM} -o cc2_bams/{wildcards.names} {input.FL}"
